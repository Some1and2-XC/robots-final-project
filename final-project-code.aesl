<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="-1" name="BC_ERROR"/>
<constant value="0" name="BC_UNINIT"/>
<constant value="1" name="BC_LEFT"/>
<constant value="2" name="BC_RIGHT"/>
<constant value="3" name="BC_DEAD"/>
<constant value="200" name="SPEED"/>
<constant value="4000" name="BARCODE_READ_COLOR_THRESHOLD"/>
<constant value="3000" name="BARCODE_READ_DISTANCE"/>
<constant value="0" name="PS_STOPPED"/>
<constant value="1" name="PS_LOOK_AND_SCAN"/>
<constant value="2" name="PS_ALIGN_BACK_UP"/>
<constant value="3" name="PS_ALIGN_BARCODE"/>
<constant value="4" name="PS_ALIGN_BARCODE_RIGHT"/>
<constant value="5" name="PS_ALIGN_BARCODE_SCAN"/>
<constant value="300" name="TAPE_THRESHOLD"/>
<constant value="201" name="PS_LINEFOLLOW_RIGHT"/>
<constant value="202" name="PS_LINEFOLLOW_LEFT"/>
<constant value="4" name="BC_BLACK_WHITE_BLACK"/>
<constant value="301" name="PS_CROSS_LINES"/>
<constant value="302" name="PS_SHOW_COLORS"/>
<constant value="7" name="PS_ALIGN_WAIT_AFTER_SCAN"/>
<constant value="303" name="PS_CROSS_LINES_AVOID_WALL"/>
<constant value="1500" name="AVOID_WALL_DISTANCE"/>
<constant value="8" name="PS_SHOW_FINAL_COLORS"/>
<constant value="10" name="PS_TURNING"/>
<constant value="12" name="PS_TURN_PAUSE"/>
<constant value="101" name="PS_MVMT_OBJECT_AVOID_TURN"/>
<constant value="102" name="PS_MVMT_OBJECT_AVOID"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">#VARIABLES

var barcode_list[3] = [BC_UNINIT, BC_UNINIT, BC_UNINIT] # Values of the barcodes that have been read
var lights[] = [0, 0, 0] # Array representing the state of the lights
var barcode_number = 0
var program_state = PS_STOPPED

var time_to_turn = 0

var prev_state = 0

var cross_line_count = 0 # Value for counting the lines that we crossed

var tmp_color[] = [0, 0, 0] # Temporary variable for reading the color into
var direction = 0 # The value of the first barcode value, -1 for left and 1 for right

# Initializes timer values
var timer_0 = 0
var timer_target = 0
timer.period[0] = 1

callsub stop

# Event handler for timer0
onevent timer0
	timer_0 += 1
	prev_state = program_state

# Event handler for timer1
onevent timer1
	barcode_number += 1
	timer.period[1] = 0
	callsub decide_turn

# Event handler for starting the program
onevent button.forward
	timer_0 = 0

	program_state = PS_LOOK_AND_SCAN
	# program_state = PS_SHOW_COLORS
	# program_state = PS_ALIGN_WAIT_AFTER_SCAN
	# program_state = PS_MVMT_OBJECT_AVOID
	# direction = -1
	# barcode_number = 1
	callsub forward

# Stop the program
onevent button.backward
	barcode_number = 0
	cross_line_count = 0
	direction = 0
	callsub stop

# Directional functions
sub forward
	motor.left.target = SPEED
	motor.right.target = SPEED
	timer.period[0] = 1

# Subroutine for stopping the robot
sub stop
	motor.left.target = 0
	motor.right.target = 0
	program_state = PS_STOPPED
	timer.period[0] = 0

# Subroutine for deciding the lights to flash
sub light_final_colors

	if barcode_list[2] == BC_LEFT then
		call leds.top(32, 0, 0)
	elseif barcode_list[2] == BC_RIGHT then
		call leds.top(0, 32, 0)
	elseif barcode_list[2] == BC_BLACK_WHITE_BLACK then
		call leds.top(0, 0, 32)
	else
		call leds.top(0, 0, 32) # Fallback color
	end

# Subroutine for handling all turning
# The `direction` value must be set before calling this subfunction
sub decide_turn
	program_state = PS_TURN_PAUSE

	if direction == -1 then

		if barcode_number == 1 then
			time_to_turn = 1100
		elseif barcode_number == 2 then
			time_to_turn = 1400
		elseif barcode_number == 3 then
			time_to_turn = 1200
		end
	else
		if barcode_number == 1 then
			time_to_turn = 1350
		elseif barcode_number == 2 then
			time_to_turn = 1200
		elseif barcode_number == 3 then
			time_to_turn = 1200
		end
	end

	if barcode_number == 3 then
		if barcode_list[0] == barcode_list[1] then
			timer.period[1] = 6000
		else
			timer.period[1] = 7000
		end
	end

	timer_0 = 0
	motor.left.target = 0
	motor.right.target = 0

# Event handler for hitting into a wall
onevent tap

	# We check the state because we don't want unexpected behaviour
	if program_state == PS_LOOK_AND_SCAN or program_state == PS_LINEFOLLOW_RIGHT or program_state == PS_LINEFOLLOW_LEFT then
		program_state = PS_ALIGN_BACK_UP
		timer_0 = 0
		motor.left.target = -SPEED
		motor.right.target = -SPEED
	end

# Main logic loop
onevent prox

	# If we are looking for the barcode
	if program_state == PS_LOOK_AND_SCAN then
		callsub forward

		if prox.ground.delta[0] &lt; TAPE_THRESHOLD then
			if barcode_number >= 4 then
				program_state = PS_CROSS_LINES
			else
				program_state = PS_LINEFOLLOW_RIGHT
			end
		end

	# Program state for backing up a bit before reading barcode
	elseif program_state == PS_ALIGN_BACK_UP then
		program_state = PS_ALIGN_BARCODE
		if timer_0 > 15 then
			program_state = PS_ALIGN_BARCODE
			motor.left.target = -SPEED
			motor.right.target = SPEED
		end

	# Goes to left of tape
	elseif program_state == PS_ALIGN_BARCODE then

		if prox.ground.delta[0] &lt; TAPE_THRESHOLD then
			motor.left.target = -SPEED
			motor.right.target = SPEED
		else
			program_state = PS_ALIGN_BARCODE_RIGHT
			motor.left.target = SPEED
			motor.right.target = -SPEED
			timer_0 = 0
		end

	# Goes to right of tape (and times it)
	elseif program_state == PS_ALIGN_BARCODE_RIGHT then
		if prox.ground.delta[1] > TAPE_THRESHOLD then
			timer_target = timer_0 / 2
			timer_0 = 0
			motor.left.target = -SPEED
			motor.right.target = SPEED
			program_state = PS_ALIGN_BARCODE_SCAN
		end

	# Goes half way back and scans barcode
	elseif program_state == PS_ALIGN_BARCODE_SCAN then
		# Checks if the timer expired (the timer for probably being in the middle)
		# 50 is a constant just for consistency
		if timer_0 > timer_target - 50 then
			# Here is where we read the barcode

			# Sets tmp_color to the barcode currently being read
			if prox.horizontal[1] > BARCODE_READ_COLOR_THRESHOLD then
				tmp_color[0] = 1
			else
				tmp_color[0] = 0
			end

			if prox.horizontal[2] > BARCODE_READ_COLOR_THRESHOLD then
				tmp_color[1] = 1
			else
				tmp_color[1] = 0
			end

			if prox.horizontal[3] > BARCODE_READ_COLOR_THRESHOLD then
				tmp_color[2] = 1
			else
				tmp_color[2] = 0
			end

			# Decodes the barcode
			if tmp_color[0] == 1 and tmp_color[1] == 0 and tmp_color[2] == 0 then
				barcode_list[barcode_number] = BC_LEFT
			elseif tmp_color[0] == 0 and tmp_color[1] == 0 and tmp_color[2] == 1 then
				barcode_list[barcode_number] = BC_RIGHT
			elseif tmp_color[0] == 1 and tmp_color[1] == 0 and tmp_color[2] == 1 then
				barcode_list[barcode_number] = BC_DEAD
			elseif tmp_color[0] == 0 and tmp_color[1] == 1 and tmp_color[2] == 0 then
				barcode_list[barcode_number] = BC_BLACK_WHITE_BLACK
			else
				barcode_list[barcode_number] = BC_ERROR
			end

			if barcode_number == 0 then
					if barcode_list[0] == BC_LEFT then
						direction = -1
					elseif barcode_list[0] == BC_RIGHT then
						direction = 1
					else
						callsub stop
					end
			end

			# Light up the lights if it is the first or second bc
			if barcode_number == 0 or barcode_number == 1 then
				if barcode_list[barcode_number] == BC_LEFT then
					call leds.circle(0, 0, 0, 0, 0, 0, 32, 0)
				else
					call leds.circle(0, 0, 32, 0, 0, 0, 0, 0)
				end
				call sound.freq(440, 440)
			elseif barcode_number == 2 then
				callsub light_final_colors
			end

			barcode_number ++
			program_state = PS_ALIGN_WAIT_AFTER_SCAN
			timer_0 = 0
		end

	# State for clearing leds and sounds after brief interval
	elseif program_state == PS_ALIGN_WAIT_AFTER_SCAN then
			if barcode_list[0] == BC_LEFT then
				direction = -1
			else
				direction = 1
			end
			timer.period[0] = 1
			motor.left.target =   SPEED * direction
			motor.right.target = -SPEED * direction
			if timer_0 >= 30 then
				timer_0 = 0

				call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)
				call sound.freq(0, 0)
				call leds.top(0, 0, 0)

				callsub decide_turn
			end

	# State for crossing and counting horizontal lines
	elseif program_state == PS_CROSS_LINES then

		# Basically if cross_line_count is odd, we are on the tape
		# If it is even, then we are off the tape.
		# This way everything can be done without extra variables and can be handled in a simple way.

		if cross_line_count % 2 == 0 and prox.ground.delta[0] &lt; TAPE_THRESHOLD then
			cross_line_count += 1
		elseif cross_line_count % 2 == 1 and prox.ground.delta[0] > TAPE_THRESHOLD then
			cross_line_count += 1
		end

		if cross_line_count >= 6 then
			program_state = PS_SHOW_COLORS

			timer_0 = 0
			motor.left.target = 0
			motor.right.target = 0
			if barcode_list[1] == BC_LEFT then
				direction = -1
			else
				direction = 1
			end
		end

		motor.left.target  = 3 * SPEED / 4 + SPEED * direction / 8
		motor.right.target = 3 * SPEED / 4 - SPEED * direction / 8

		if prox.horizontal[4 * ((direction + 1) / 2)] > AVOID_WALL_DISTANCE then
			program_state = PS_CROSS_LINES_AVOID_WALL
		end

	# State for showing the final colors at the end of the course
	elseif program_state == PS_SHOW_FINAL_COLORS then

		# Stops after 5s
		if timer_0 > 2000 then
			callsub stop
		end

		callsub stop
		callsub light_final_colors

	# State for avoiding the wall while crossing horizontal lines
	elseif program_state == PS_CROSS_LINES_AVOID_WALL then

		if cross_line_count % 2 == 0 and prox.ground.delta[0] &lt; TAPE_THRESHOLD then
			cross_line_count += 1
		elseif cross_line_count % 2 == 1 and prox.ground.delta[0] > TAPE_THRESHOLD then
			cross_line_count += 1
		end
		motor.left.target  = -SPEED * direction
		motor.right.target =  SPEED * direction

		if prox.horizontal[4 * ((direction + 1) / 2)] &lt; AVOID_WALL_DISTANCE then
			program_state = PS_CROSS_LINES
		end

	# State for showing colors after crossing the horizontal lines
	elseif program_state == PS_SHOW_COLORS then

		motor.left.target = 0
		motor.right.target = 0

		# Stops after 5s
		if timer_0 > 5000 then
			call leds.top(0, 0, 0)
			callsub decide_turn
			timer_0 = 0
			timer.period[0] = 1
			program_state = PS_MVMT_OBJECT_AVOID
			call sound.freq(0, 0)
		end

		if timer_0 % 1000 > 500 then
			call leds.top(32, 0, 0)
		else
			call leds.top(0, 0, 0)
		end

		call sound.freq(440, 440)

	# The left line follow state
	elseif program_state == PS_LINEFOLLOW_LEFT then
			if prox.ground.delta[0] >= TAPE_THRESHOLD then
				program_state = PS_LINEFOLLOW_RIGHT
				motor.left.target = SPEED
				motor.right.target = 0
		end
		if prox.horizontal[2] > BARCODE_READ_DISTANCE then
			program_state = PS_ALIGN_BARCODE
			motor.left.target = -SPEED
			motor.right.target = SPEED
		end

	# The right line follow state
	elseif program_state == PS_LINEFOLLOW_RIGHT then
		if prox.ground.delta[0] &lt; TAPE_THRESHOLD then
			program_state = PS_LINEFOLLOW_LEFT
			motor.left.target = 0
			motor.right.target = SPEED
		end
		if prox.horizontal[2] > BARCODE_READ_DISTANCE then
			program_state = PS_ALIGN_BARCODE
			motor.left.target = -SPEED
			motor.right.target = SPEED
		end

	# State for pausing before turning
	elseif program_state == PS_TURN_PAUSE then
		if timer_0 > 25 then

			if barcode_number == 1 or barcode_number == 4 then
				motor.left.target = SPEED * direction
				motor.right.target = -SPEED * direction
			elseif barcode_number == 2 or barcode_number == 3 then
				motor.left.target = -SPEED * direction
				motor.right.target = SPEED * direction
			end
			program_state = PS_TURNING
		end

	# State for turning a set amount of time in a set direction
	elseif program_state == PS_TURNING then
		if timer_0 > time_to_turn then
			program_state = PS_LOOK_AND_SCAN
		end

	# The object avoid state for the end of the course
	elseif program_state == PS_MVMT_OBJECT_AVOID then

		motor.left.target  = 3 * SPEED / 4 + SPEED * direction / 8
		motor.right.target = 3 * SPEED / 4 - SPEED * direction / 8

		if timer_0 > 30000 then
			motor.left.target = 0
			motor.right.target = 0
			program_state = PS_SHOW_FINAL_COLORS
		end

		# 4 * ((-1 + 1) / 2) = 0 (Sensor 0 on direction = left)
		# 4 * (( 1 + 1) / 2) = 4 (Sensor 4 on direction = right)
		if prox.horizontal[4 * ((direction + 1) / 2)] > AVOID_WALL_DISTANCE or prox.horizontal[2] > AVOID_WALL_DISTANCE then
			program_state = PS_MVMT_OBJECT_AVOID_TURN
		end

	# The object avoid state for turning instead of running into walls
	elseif program_state == PS_MVMT_OBJECT_AVOID_TURN then

		motor.left.target = - SPEED * direction
		motor.right.target =  SPEED * direction

		# I was feeling quirky uwu
		if prox.horizontal[4 * ((direction + 1) / 2)] &lt; AVOID_WALL_DISTANCE or prox.horizontal[2] &lt; AVOID_WALL_DISTANCE then
			program_state = PS_MVMT_OBJECT_AVOID
		end
	end
</node>


</network>
